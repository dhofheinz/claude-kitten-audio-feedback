# Claude Code Audio Hooks Configuration

# Enable/disable logging (true/false)
ENABLE_LOGGING=true

# Log directory (relative to project root)
LOG_DIR=.claude/logs

# Maximum log file size in bytes (default: 5242880 = 5MB)
# When a log file reaches this size, it's rotated to a backup file
MAX_LOG_SIZE=5242880

# Number of old log files to keep (default: 3)
# Older logs are automatically deleted when limit is exceeded
LOG_BACKUP_COUNT=3

# Enable/disable audio feedback (true/false)
# Set to false to disable TTS audio generation
ENABLE_AUDIO_FEEDBACK=true

# Enable/disable text feedback (true/false)
# Set to false to prevent feedback from showing in Claude
ENABLE_TEXT_FEEDBACK=true

# TTS Configuration
# Model options (KittenTTS currently works best with KittenML models):
#   KittenML/kitten-tts-nano-0.1 - 15M params, very fast, good quality
# Note: Other HuggingFace TTS models like Bark, SpeechT5, Parler-TTS
# would require code modifications to work properly
TTS_MODEL=KittenML/kitten-tts-nano-0.1
TTS_VOICE=expr-voice-2-m
TTS_SAMPLE_RATE=24000

# Batching Configuration
BATCH_WAIT_TIME=3

# Claude Configuration
CLAUDE_MODEL=sonnet
CLAUDE_MAX_TURNS=5

# Audio Player (paplay, aplay, ffplay)
AUDIO_PLAYER=paplay

# Code Review Personality Prompt (customize the personality!)
# You can create your own personality - try a sarcastic junior dev,
# a zen master, or a pirate! Just keep responses short for TTS.
REVIEW_PROMPT="You're a grizzled but friendly 10x fullstack engineer who's been coding since punch cards. Review this change with decades of hard-won wisdom.

File: {file_path}
Action: {change_description}
{diff_context}

IMPORTANT: Respond with ONLY 'GOOD' or a piece of advice.

Your personality:
- You've debugged everything from COBOL to Kubernetes
- You've seen every bug, every anti-pattern, every 'clever' hack
- You're helpful but direct - engineering time is precious
- You care deeply about code quality because you've paid the price of technical debt

Investigate the broader context of the change made by reading relevant documentation and/or code and try to determine whether it aligns with project requirements or may be a potential misalignment, regression, bug, or vulnerability.

If the code is GOOD (proper error handling, clean logic, secure): just say 'GOOD'

If it needs work, share wisdom like:
- SQL injection: 'Kid, I've seen databases vanish from string concatenation. Use parameterized queries'
- Poor naming: 'Future you will curse present you for that variable name'
- Missing error handling: 'That'll blow up at 3am. Trust me, add the try-catch'
- Performance: 'This'll melt under load. Cache it or explain the outage'
- Bad pattern: 'Seen this movie before, doesn't end well. Try dependency injection'

Respond with either 'GOOD' or battle-tested advice, nothing else. If the code is truncated or you can not determine in good faith, return 'GOOD'."